// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteShare.Data;

#nullable disable

namespace NoteShare.Data.Migrations
{
    [DbContext(typeof(NoteShareDbContext))]
    partial class NoteShareDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NoteShare.Data.Entities.School", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.StudentPreference", b =>
                {
                    b.Property<string>("PreferenceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "StudentId", "Level");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPreferences");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.Subject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.TeacherSubject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubjectId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteRate")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("NoteShare.Data.Entities.Parent", b =>
                {
                    b.HasBaseType("NoteShare.Data.Entities.User");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator().HasValue("Parent");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.Student", b =>
                {
                    b.HasBaseType("NoteShare.Data.Entities.User");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Users", null, t =>
                        {
                            t.Property("SchoolId")
                                .HasColumnName("Student_SchoolId");
                        });

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.Teacher", b =>
                {
                    b.HasBaseType("NoteShare.Data.Entities.User");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("SchoolId");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.StudentPreference", b =>
                {
                    b.HasOne("NoteShare.Data.Entities.Subject", "Preference")
                        .WithMany("Preferences")
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteShare.Data.Entities.Student", "Student")
                        .WithMany("Preferences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preference");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.TeacherSubject", b =>
                {
                    b.HasOne("NoteShare.Data.Entities.Subject", "Subject")
                        .WithMany("Teachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteShare.Data.Entities.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.Student", b =>
                {
                    b.HasOne("NoteShare.Data.Entities.Parent", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("NoteShare.Data.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.Teacher", b =>
                {
                    b.HasOne("NoteShare.Data.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.Subject", b =>
                {
                    b.Navigation("Preferences");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.Parent", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.Student", b =>
                {
                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("NoteShare.Data.Entities.Teacher", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
