@page "/login"
@inject IAuthService _AuthService
@inject NavigationManager _NavigationManager
@inject ISecureStorageService _SecureStorageService

<div class="outer-div">
    <div class="inner-div">
        <h1>NoteShare</h1>
        <div class="input-container">
            <div class="background"></div>
            <input type="email" id="emailInput" @bind="@email" />
           <div class="label">
               <div class="label_background"></div>
               <div class="text">Email</div>
               </div>
        </div>
        <div class="input-container">
            <div class="background"></div>
            <input type="@txtType" id="passwordInput" @bind="@password" />
            <span class="e-input-eye fas fa-eye" @onclick="ShowPassword"><i class=""></i></span>
            <div class="label">
                <div class="label_background"></div>
                <div class="text">Jelszó</div>
         </div>
        </div>
        <div class="forgotten">
            <a href="/forgotten">Elfelejtett jelszó</a>
        </div>
        <button class="loginButton" @onclick="Login">Bejelentkezés</button>
        <div class="line"></div>
        <div class="registration">
            <p>Még nincs fiókod? <a href="/registration">Regisztráció</a></p>
        </div>
    </div>
</div>
<AlertComponent Message=@message AlertType=@alerttype IsVisible=@IsVisible/>

@code{

    public string txtType = "password";
    private string password = "";
    private string email = "";
    private string message = "";
    private string token;
    private string alerttype = "error";
    private bool IsVisible = false;


    protected override async Task OnInitializedAsync()
    {
        token = await _SecureStorageService.GetTokenAsync();
        if(token is not null)
        {
             _NavigationManager.NavigateTo("/dashboard");
        }
    }

    void ShowPassword()
    {
        if (this.txtType == "password")
        {
            this.txtType = "text";
        }
        else
        {
            this.txtType = "password";
        }
    }


    // TODO: Login Refaktorálása
    private async Task Login()
    {
        IsVisible = false;
        LoginDto ldto = new LoginDto
            {
                Email = email,
                Password = password
            };

        try
        {
            var authResponse = await _AuthService.Login(ldto);
            token = await _SecureStorageService.GetTokenAsync();
            if (token is not null)
            {
                alerttype = "success";
                message = "Sikeres bejelentkezés.";
                IsVisible = true;
                _NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                alerttype = "error";
                message = "Hiba történt a bejelentkezés során, próbálja újra.";
                IsVisible = true;
            }
        }
        catch (HttpRequestException ex)
        {
            alerttype = "error";
            message = "Hiba történt a bejelentkezés során, próbálja újra.";
            IsVisible = true;
        }
        catch (Exception ex)
        {
            alerttype = "error";
            message = "Váratlan hiba történt, kérem próbálja újra.";
            IsVisible = true;
        }
    }

}